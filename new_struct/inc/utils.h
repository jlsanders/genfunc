/*======================================*/
/*		  A few utility functions 	  	*/
/*======================================*/
#ifndef UTILS_H
#define UTILS_H

#include <vector>
#include <cmath>
#include <iostream>

typedef std::vector<double> VecDoub;

const double PI = 3.14159265359;
const double Grav = 430091.5694; /* in units kpc, km/s and 10^11 M_solar */
const double TINY = 1e-10;

#define MAX(A,B) A>B?A:B

template<class c>
c Max(const std::vector<c> &a){
	c R = a[0];
	for_each(begin(a),end(a),[&R](c p){if(p>R)R=p;});
	return R;
}

template<class c>
c Min(const std::vector<c> &a){
	c R = a[0];
	for_each(begin(a),end(a),[&R](c p){if(p<R)R=p;});
	return R;
}

template<class c>
void printVector(const std::vector<c> &a){
	for ( unsigned int i=0;i<a.size();i++)std::cout<<a[i]<<" ";
	std::cout<<std::endl;
}

template<class c>
std::vector<c> concatVectors(const std::vector<c> &a, const std::vector<c> &b){
	int p = a.size();
	std::vector<c> Result (p+b.size());
	for(int i=0;i<p;i++)Result[i]=a[i];
	for(int i=0;i<b.size();i++)Result[i+p]=b[i];
	return Result;
}

template<class c>
double Mean(const std::vector<c> &a){
	double R;
	for_each(begin(a),end(a),[&R](c p){R+=p;});
	return ((double)R/(double)a.size());
}

template<class c>
double SD(const std::vector<c> &a){
	double R1, R2;
	for_each(begin(a),end(a),[&R1,&R2](c p){R1+=p;R2+=p*p;});
	int N=a.size();R1/=(double)N;
	return sqrt(R2/N-R1*R1);
}

static double abscissa50[50]={0.0156289844215430828722167,0.0468716824215916316149239,0.0780685828134366366948174,0.1091892035800611150034260,0.1402031372361139732075146,0.1710800805386032748875324,0.2017898640957359972360489,0.2323024818449739696495100,0.2625881203715034791689293,0.2926171880384719647375559,0.3223603439005291517224766,0.3517885263724217209723438,0.3808729816246299567633625,0.4095852916783015425288684,0.4378974021720315131089780,0.4657816497733580422492166,0.4932107892081909335693088,0.5201580198817630566468157,0.5465970120650941674679943,0.5725019326213811913168704,0.5978474702471787212648065,0.6226088602037077716041908,0.6467619085141292798326303,0.6702830156031410158025870,0.6931491993558019659486479,0.7153381175730564464599671,0.7368280898020207055124277,0.7575981185197071760356680,0.7776279096494954756275514,0.7968978923903144763895729,0.8153892383391762543939888,0.8330838798884008235429158,0.8499645278795912842933626,0.8660146884971646234107400,0.8812186793850184155733168,0.8955616449707269866985210,0.9090295709825296904671263,0.9216092981453339526669513,0.9332885350430795459243337,0.9440558701362559779627747,0.9539007829254917428493369,0.9628136542558155272936593,0.9707857757637063319308979,0.9778093584869182885537811,0.9838775407060570154961002,0.9889843952429917480044187,0.9931249370374434596520099,0.9962951347331251491861317,0.9984919506395958184001634,0.9997137267734412336782285};
static double weights50[50]={};

inline double GaussLegendreQuad(double (*func)(double, void*),double a,double b, void *p = NULL){
	// Adapted from numerical recipes routine qgaus
	double xm=0.5*(b+a);
	double xr=0.5*(b-a);
	double ss=0.0;
	for (int j=0; j<50; j++){
		double dx=xr*abscissa50[j];
		ss=ss+weights50[j]*(func(xm+dx,p)+func(xm-dx,p));
	}
	return ss*xr;
}

#endif
